import "vite/client";

type ViteImportMeta = ImportMeta & {
  readonly env?: {
    readonly DEV?: boolean;
  };
};

/**
 * Registers the service worker generated by Vite to enable offline caching.
 *
 * The registration is skipped in unsupported environments and during
 * development sessions so developers can iterate without caching issues.
 */
export async function registerServiceWorker(): Promise<void> {
  const isSupported = typeof navigator !== "undefined" && "serviceWorker" in navigator;
  const viteMeta = import.meta as ViteImportMeta;
  const isProduction = viteMeta.env?.DEV === false;

  if (!isSupported || !isProduction) {
    return;
  }

  const serviceWorkerUrl = new URL("../sw.ts", import.meta.url);

  try {
    const registration = await navigator.serviceWorker.register(serviceWorkerUrl, {
      type: "module",
      scope: "/"
    });

    registration.addEventListener("updatefound", () => {
      const installing = registration.installing;
      if (!installing) {
        return;
      }

      installing.addEventListener("statechange", () => {
        if (installing.state === "installed" && navigator.serviceWorker.controller) {
          console.info("[PWA] New content cached. Reload to update.");
        }
      });
    });
  } catch (error) {
    console.warn("[PWA] Service worker registration failed", error);
  }
}
